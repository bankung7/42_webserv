Functions in C which allowed to use.
- gai_strerror
    netdb.h
    return a text string describing an error value for the getaddrinfo and getnameinfo functions

- sockerpair
    sys/socket.h
    create unnamed pair of connected sockets in the specified domain, of the specified type, and using the optionally specified protocol.
    return 0 when success, -1 when error (errno)

- htons/htonl
    arpa/inet.h
    converts the unsigned short/[] int hostshort/hostlong from host byte order to network byte order.
    return uint16_t hostshort/uint32_t hostlong;

- ntohs/ntohl
    arpa/inet.h
    convert unsigned short/[] int netshort/netlong from network byte order to host byte order.
    return uint16_t netshort/uint32_t netlong;

- select
    sys/select.h
    int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);
    it allows a program to monitor multiple file descriptors, waiting until one or more of the fd become "ready" for some class of I/O operations. A fd is considered ready if it is possible to perform the corresponding I/O operation without blocking.
    return the number of fd contained in the three returned descriptor sets when success, it may be 0 if the timeout expire before anything interesting happens. -1 when error (errno)

- poll
	poll.h
	int poll(struct pollfd fds[], nfds_t nfds, int timeout);
	provides applications with a mechianism for multiplexing I/O over a set of fd.
	return non-negative value, positive indicate total number of fd that have been selected, 0 when timeout and no fd selected, -1 when error (errno)

- epoll (create, ctl, wait)

- kqueue (kqueue, kevent)

- socket
    sys/socket.h
    int socket(int domain, int type, int protocol);
    create an unbound socket in a communications domain, and return fd that can be used in later function calls that operates on socket.
    return non-negative int (fd) when success. -1 when error (errno)

- accept
    sys/socket.h
    int accept(int socket, struct sockaddr *restict address, socklen_t *restrint address_len);
    extract the first connection on the queue of pending connections, create a new socket with the same socket type protocol and address family as the specified socket, and allocate a new fd for that socket.
    return non-negative fd when success. -1 when error (errno)

- listen
    sys/socket.h
    int listen(int socket, int backlog);
    mark a connection-mode socket, specified by the socket aygument, as accepting connections.
    return 0 when success, -1 when error (errno).

- send
    sys/socket.h
    ssize_t send(int socket, const void *bf, size_t length, int flag);
    initiate transmission of a message from the specified socket to its peer. only send when the socket is connected.
    return number of bytes sent when success, -1 when error (errno)

- recv
    sys/socket.h
    ssize_t recv(int socket, void *bf, size_t length, int flags);
    receive a message from a connection-mode or connectionless-mode.
    return length of the message in bytes, 0 when no message are avaiable, -1 when error (errno)

- connect
    sys/socket.h
    int connect(int socket, const struct sockaddr *addr, socklen_t address_len);
    attempt to make a connection on a socket.
    return 0 when success, -1 when error (errno)

- getaddrinfo
    sys/socket.h sys.types.h netdb.h
    int getaddringo(const char *node, const char *service, const struct addrinfo *hints, struct addrinfo **res);
    return one or more addrinfo structures.
    
- freeaddrinfo
    sys/socket.h sys/types.h netdb.h
    void freeaddrinfo(struct addrinfo *res);
    free the memory that was allocated for the dynamically allocated linked list res.

- setsockopt
    sys/socket.h
    int setsockopt(int socket, int level, int option_name, const void *option_value, socklen_t option_len);
    set the option specified by the option_name argument.
    return 0 when success, -1 when error (errno)

- getsockname
    sys/socket.h
    int getsockname(int socket, struct sockaddr *restrict address, socklen_t *restrict address_len);
    retreive the locally-bound name of the specified socket, store this address and lenngth.
    return 0 when success, -1 when error (errno)

- getprotobyname
    netdb.h
    return a protoent structure for the entry from the database that matches the protocol name. A connection is opened to the database if necessary.
    return pointer to a statically allocated protoent structure, NULL when error or the end of the file is reached.

- bind
	sys/socket.h
	int bind(int socket, const struct sockaddr *address, socklen_t address_len);
	assign a local socket address to a socket identified by descriptor socket that has no local socket address assigned. Socket created with the socket() function are initially unnamed.
	return 0 when success, -1 when error (errno)

- fcntl
	unistd.h fcntl.h
	int fcntl(int fd, int cmd, ...);
	perform the operations described below on open files.
	return depend on cmd (...) when success, -1 when error (errno)

- stat
	sys/stat.h
	int stat(const char *restrict path, struct stat *restrict bf);
	obtain information about the named file and write it to the area pointed to by th bf.
	return 0 when success, -1 when error (errno)

The sockaddr_in structure
Syntax

struct sockaddr_in {
	short			sin_family;
	unsigned short 	sin_port;
	struct in_addr	sin_addr;
	char			sin_zero[8];
};

It is intended to store the address of the server in Internet connections and to be compatible in size and data order with a sockaddr structure used by the connect() function to connect to a server.
- sin_family : this is a short that specified the type of address family that the structure contains.
- sin_port : it is a ushort that specifies the port number that the socket will use. Like address, the port number is not encoded, which means that it must be specified in direct binary format, so a conversion to this data type must be done to assign a value to it.
- in_add : This is a structure whose member is a uint32_t where each of its 4 bytes corresponds to a field of the IPv4 address of the Internet server with which the socket is to be opened. Like port number, the address in this structure must be specified in pure binary format.
- sin_zero : This is an 8-character array whose only purpose is to balance the size of the struture  of type sockaddr.

